/*
Java Sample of: 
 - [Maybe Unnecessary] Use of 3-dimensional matrixes
 - Dispersion of a value by sectorizing a matrix
 - "tests" is the number of "punches" made
 - OWalls is the original Wall, Walls is which receive the damage on given point.
*/
import java.io.IOException;
import java.util.Scanner; 

public class Rulk {
 
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        
        //Inputs
        int tests = sc.nextInt();
        int para[][] = new int [tests][4];
        int walls[][][] = new int [tests][100][100];  //Damage
        int OWalls[][][] = new int [tests][100][100]; //Original
        
        for (int i = 0; i < tests; i++){
            for (int j = 0; j<4 ;j++) para[i][j] = sc.nextInt();
            for (int h = 0; h < para[i][0]; h++){
                for (int k = 0; k < para[i][1]; k++) {
                    OWalls[i][h][k] = sc.nextInt();
                    walls[i][h][k] = 0;
                }
            }
        }
        
        //Damage going through walls[][][]
        for (int i = 0; i < tests; i++){
            int x = para[i][2] -1, y = para[i][3]-1;
            
            for (int j = x; j >= 0; j--) {
                if (10-(x-j) >= 1) walls [i][j][y] = (10-(x-j));
                else walls [i][j][y] = 1;
            }
            for (int j = y; j >= 0; j--) {
                if (10-(y-j) >= 1) walls [i][x][j] = (10-(y-j));
                else walls [i][x][j] = 1;
            }
            for (int j = x; j <= para[i][0]; j++) {
                if (10-(j-x) >= 1) walls [i][j][y] = (10-(j-x));
                else walls [i][j][y] = 1;
            }
            for (int j = y; j <= para[i][1]; j++) {
                if (10-(j-y) >= 1) walls [i][x][j] = (10-(j-y));
                else walls [i][x][j] = 1;
            }
            
            /*System.out.println("Test 1 - Wall " + (i+1));
            for (int h = 0; h < para[i][0]; h++){
                for (int k = 0; k < para[i][1]; k++) {
                    System.out.print(walls[i][h][k] + " ");
                }
                System.out.println();
            }*/
            
            
            for (int j = 1; ((y-j) > 0) || ((y+j) < para[i][0]); j++){
                for (int k = 1; ((x-k) > 0) || ((x+k)< para[i][1]) ; k++){
                    if (((x+1-k) > 0) && (y+1-j) > 0){
                        if(walls[i][y-j][x-k+1] == walls[i][y-j+1][x-k]) walls[i][y-j][x-k] = walls[i][y-j][x-k+1];
                        else if (walls[i][y-j][x-k+1] > walls[i][y-j+1][x-k]) walls[i][y-j][x-k] = walls[i][y-j+1][x-k];
                        else if (walls[i][y-j][x-k+1] < walls[i][y-j+1][x-k]) walls[i][y-j][x-k] = walls[i][y-j][x-k+1]; //Ok
                    }
                    if (((x+1-k) > 0) && ((y+j) < para[i][0])){
                        if(walls[i][y+j][x-k+1] == walls[i][y+j-1][x-k]) walls[i][y+j][x-k] = walls[i][y+j-1][x-k];
                        else if (walls[i][y+j][x-k+1] > walls[i][y+j-1][x-k]) walls[i][y+j][x-k] = walls[i][y+j-1][x-k];
                        else if (walls[i][y+j][x-k+1] < walls[i][y+j-1][x-k]) walls[i][y+j][x-k] = walls[i][y+j][x-k+1]; //Ok
                    }
                    if (((x+k)< para[i][1]) && (y+1-j) > 0){
                        if(walls[i][y-j][x+k-1] == walls[i][y-j+1][x+k]) walls[i][y-j][x+k] = walls[i][y-j+1][x+k];
                        else if (walls[i][y-j][x+k-1] > walls[i][y-j+1][x+k]) walls[i][y-j][x+k] = walls[i][y-j+1][x+k];
                        else if (walls[i][y-j][x+k-1] < walls[i][y-j+1][x+k]) walls[i][y-j][x+k] = walls[i][y-j][x+k-1]; //Ok
                    }
                    if (((x+k)< para[i][1]) && ((y+j) < para[i][0])){
                        if(walls[i][y+j][x+k-1] == walls[i][y+j-1][x+k]) walls[i][y+j][x+k] = walls[i][y+j-1][x+k];
                        else if (walls[i][y+j][x+k-1] > walls[i][y+j-1][x+k]) walls[i][y+j][x+k] = walls[i][y+j-1][x+k];
                        else if (walls[i][y+j][x+k-1] < walls[i][y+j-1][x+k]) walls[i][y+j][x+k] = walls[i][y+j][x+k-1]; //Ok
                    }
                }
            }
            
            /*System.out.println("Test 2 - Wall " + (i+1));
            for (int h = 0; h < para[i][0]; h++){
                for (int k = 0; k < para[i][1]; k++) {
                    System.out.print(walls[i][h][k] + " ");
                }
                System.out.println();
            }*/
            
            System.out.println("Wall " + (i+1)+":");
            for (int h = 0; h < para[i][0]; h++){
                for (int k = 0; k < para[i][1]; k++) {
                    OWalls[i][h][k] = OWalls[i][h][k] + walls[i][h][k];
                    System.out.print(OWalls[i][h][k]);
                    if (k < para[i][1]-1)System.out.print(" ");
                }
                System.out.println();
            }
            
            
            
        }
    }
 
}
